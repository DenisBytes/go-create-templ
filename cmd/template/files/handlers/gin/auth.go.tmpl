package handler

import (
	"log/slog"
	"net/http"
	"os"

	"{{.ProjectName}}/db"
	"{{.ProjectName}}/pkg/validate"
	"{{.ProjectName}}/pkg/sb"
	"{{.ProjectName}}/types"
	"{{.ProjectName}}/view/auth"
    "github.com/gin-gonic/gin"
	"github.com/gorilla/sessions"
	"github.com/nedpals/supabase-go"
)

const (
	sessionUserKey        = "user"
	sessionAccessTokenKey = "accessToken"
)

func HandleLogInIndex(c *gin.Context) error {

	return auth.Login().Render(c.Request.Context(), c.Writer)
}

func HandleLoginPost(c *gin.Context) error {
	credentials := supabase.UserCredentials{
		Email: c.Request.FormValue("email"),
	}
	err := sb.Client.Auth.SendMagicLink(c.Request.Context(), credentials.Email)
	if err != nil {
		slog.Error("login error", "err", err)
		return auth.LoginForm(credentials, auth.LoginErrors{
			InvalidCredentials: err.Error(),
		}).Render(c.Request.Context(), c.Writer)
	}
	return auth.MagicLinkSuccess(credentials.Email).Render(c.Request.Context(), c.Writer)
}

func HandleAuthCallback(c *gin.Context) error {
	accessToken := c.Query("access_token")
	if len(accessToken) == 0 {
		return auth.CallbackScript().Render(c.Request.Context(), c.Writer)
	}
	if err := setAuthSession(c, accessToken); err != nil {
		return err
	}
	c.Redirect(http.StatusSeeOther, "/")
	return nil
}


func setAuthSession(c *gin.Context, accessToken string) error {
	store := sessions.NewCookieStore([]byte(os.Getenv("SESSION_KEY")))
	session, _ := store.Get(c.Request, "user")
	session.Values["accessToken"] = accessToken
	return session.Save(c.Request, c.Writer)
}

func HandleLogoutPost(c *gin.Context) error {
	store := sessions.NewCookieStore([]byte(os.Getenv("SESSION_KEY")))
	session, _ := store.Get(c.Request, "user")
	session.Values["accessToken"] = ""
	session.Save(c.Request, c.Writer)
	c.Redirect(http.StatusSeeOther, "/login")
	return nil
}

func HandleLoginWithGithubPost(c *gin.Context) error {
	resp, err := sb.Client.Auth.SignInWithProvider(supabase.ProviderSignInOptions{
		Provider:   "github",
		RedirectTo: "http://localhost:3000/auth/callback",
	})
	if err != nil {
		return err
	}
	c.Redirect(http.StatusSeeOther, resp.URL)
	return nil
}

func HandleAccountSetupIndex(c *gin.Context) error {
	return auth.AccountSetup().Render(c.Request.Context(), c.Writer)
}

func HandleAccountSetupPost(c *gin.Context) error {
	params := auth.AccountSetupParams{
		Username: c.Request.FormValue("username"),
	}
	var errors auth.AccountSetupErrors
	ok := validate.New(&params, validate.Fields{
		"Username": validate.Rules(validate.Min(2), validate.Max(50)),
	}).Validate(&errors)
	if !ok {
		return auth.AccountSetupForm(params, errors).Render(c.Request.Context(), c.Writer)
	}
	user := GetAuthenticatedUser(c)
	account := types.Account{
		UserID:   user.ID,
		Username: params.Username,
	}
	if err := db.CreateAccount(&account); err != nil {
		return err
	}
	hxRedirect(c, "/")
	return nil
}
