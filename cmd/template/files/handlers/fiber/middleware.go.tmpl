package handler

import (
	"database/sql"
	"errors"
	"net/http"
	"os"
	"strings"

	"github.com/gofiber/fiber/v2"
	"{{.ProjectName}}/db"
	"{{.ProjectName}}/pkg/sb"
	"{{.ProjectName}}/types"
	"github.com/google/uuid"
	"github.com/gorilla/sessions"
)

func WithAuth(next fiber.Handler) fiber.Handler {
	return func(c *fiber.Ctx) error {
		if strings.Contains(c.Path(), "/public") {
			return next(c)
		}
		user := GetAuthenticatedUser(c)
		if !user.LoggedIn {
			path := c.Path()
			return c.Redirect("/login?to="+path, http.StatusSeeOther)
		}
		return next(c)
	}
}

func WithAccountSetup(next fiber.Handler) fiber.Handler {
	return func(c *fiber.Ctx) error {
		user := GetAuthenticatedUser(c)
		account, err := db.GetAccountByUserID(user.ID)
		if err != nil {
			if errors.Is(err, sql.ErrNoRows) {
				return c.Redirect("/account/setup", http.StatusSeeOther)
			}
			return next(c)
		}
		user.Account = account
		c.Context().SetUserValue(types.UserContextKey, user)
		return next(c)
	}
}

func WithUser(next fiber.Handler) fiber.Handler {
	return func(c *fiber.Ctx) error {
		if strings.Contains(c.Path(), "/public") {
			return next(c)
		}
		store := sessions.NewCookieStore([]byte(os.Getenv("SESSION_KEY")))
		// TODO: fiber does not return http.Request, but fasthttp.Request
		session, err := store.Get(c.Request(), sessionUserKey)
		if err != nil {
			return next(c)
		}
		accessToken, ok := session.Values[sessionAccessTokenKey].(string)
		if !ok {
			return next(c)
		}
		resp, err := sb.Client.Auth.User(c.Context(), accessToken)
		if err != nil {
			return next(c)
		}
		user := types.AuthenticatedUser{
			ID:          uuid.MustParse(resp.ID),
			Email:       resp.Email,
			LoggedIn:    true,
			AccessToken: accessToken,
		}
		c.Context().SetUserValue(types.UserContextKey, user)
		return next(c)
	}
}